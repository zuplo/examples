{
  "openapi": "3.1.0",
  "info": {
    "title": "Todo List API",
    "description": "Example API, built using [Zuplo](https://zuplo.com/), for managing tasks within a todo list. You can find the source code for this example [here](https://github.com/zuplo/samples-todo-list-open-api).",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Standard Todo List Endpoints",
      "description": "Standard endpoints for managing todos list items."
    },
    {
      "name": "Extended Todo List Endpoints",
      "description": "Extended endpoints for managing todos list items. The endpoints are mainly for convenience, performing common operations on top of the standard endpoints."
    }
  ],
  "components": {
    "schemas": {
      "TodoObject": {
        "type": "object",
        "required": [
          "id",
          "userId",
          "title",
          "completed"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          }
        },
        "examples": [
          {
            "userId": 1,
            "id": 1,
            "title": "Take out the trash",
            "completed": false
          }
        ]
      },
      "AnonymousTodoObject": {
        "type": "object",
        "required": [
          "id",
          "title",
          "completed"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          }
        },
        "examples": [
          {
            "id": 1,
            "title": "Take out the trash",
            "completed": false
          }
        ]
      },
      "TodoListObject": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TodoObject"
        },
        "examples": [
          [
            {
              "userId": 1,
              "id": 1,
              "title": "Take out the trash",
              "completed": false
            }
          ]
        ]
      },
      "InsertTodoObject": {
        "type": "object",
        "title": "Todo Insert Schema",
        "required": [
          "userId",
          "title",
          "completed"
        ],
        "additionalProperties": false,
        "properties": {
          "userId": {
            "type": "integer",
            "description": "The userId that created the todo list item.",
            "examples": [
              1
            ]
          },
          "title": {
            "type": "string",
            "description": "The title of the todo list item.",
            "examples": [
              "Wash the dishes"
            ]
          },
          "completed": {
            "type": "boolean",
            "description": "Whether or not the todo list item is completed.",
            "examples": [
              false
            ]
          }
        },
        "examples": [
          {
            "userId": 1,
            "title": "Wash the dishes",
            "completed": false
          }
        ]
      },
      "UpdateTodoObject": {
        "type": "object",
        "title": "Update Todo Object",
        "additionalProperties": false,
        "required": [
          "userId",
          "completed",
          "title"
        ],
        "properties": {
          "userId": {
            "type": "integer",
            "description": "The userId that created the todo list item.",
            "examples": [
              1
            ]
          },
          "title": {
            "type": "string",
            "description": "The title of the todo list item.",
            "examples": [
              "Make dinner"
            ]
          },
          "completed": {
            "type": "boolean",
            "description": "Whether or not the todo list item is completed.",
            "examples": [
              false
            ]
          }
        },
        "examples": [
          {
            "userId": 1,
            "title": "New Title",
            "completed": false
          }
        ]
      },
      "SchemaValidationError": {
        "type": "object",
        "required": [
          "type",
          "title",
          "status",
          "detail",
          "instance"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "number"
          },
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          },
          "trace": {
            "type": "object"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          }
        },
        "examples": [
          {
            "type": "https://httpproblems.com/http-status/400",
            "title": "Bad Request",
            "status": 400,
            "detail": "Incoming body did not pass schema validation",
            "instance": "/v1/todos",
            "trace": {
              "timestamp": "2023-02-27T18:53:05.997Z",
              "requestId": "b1e1c2a9-da7b-436c-aa89-2f78918047b2",
              "buildId": "83e3d0f1-89a8-46ea-b040-e0a2432f2ea5",
              "rayId": "7a031f102747944d-SJC"
            },
            "errors": [
              "Body must have required property 'userId'"
            ]
          }
        ]
      },
      "UserObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string"
              },
              "suite": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "zipcode": {
                "type": "string"
              },
              "geo": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "string"
                  },
                  "lng": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "phone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "company": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "catchPhrase": {
                "type": "string"
              },
              "bs": {
                "type": "string"
              }
            }
          }
        },
        "examples": [
          {
            "id": 1,
            "name": "Leanne Graham",
            "username": "Bret",
            "email": "Sincere@april.biz",
            "address": {
              "street": "Kulas Light",
              "suite": "Apt. 556",
              "city": "Gwenborough",
              "zipcode": "92998-3874",
              "geo": {
                "lat": "-37.3159",
                "lng": "81.1496"
              }
            },
            "phone": "1-770-736-8031 x56442",
            "website": "hildegard.org",
            "company": {
              "name": "Romaguera-Crona",
              "catchPhrase": "Multi-layered client-server neural-net",
              "bs": "harness real-time e-markets"
            }
          }
        ]
      }
    }
  },
  "paths": {
    "/handler1": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "get": {
        "summary": "Handler 1",
        "description": "Lorem ipsum dolor sit amet, **consectetur adipiscing** elit, sed do `eiusmod tempor` incididunt ut labore et dolore magna aliqua.",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "default",
            "module": "$import(./modules/handler1)",
            "options": {}
          },
          "policies": {
            "inbound": []
          }
        },
        "operationId": "48f2c393-120e-4a54-ad34-d600fee59b0d"
      }
    },
    "/handler2/:param1": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "get": {
        "summary": "Handler 2",
        "description": "Lorem ipsum dolor sit amet, **consectetur adipiscing** elit, sed do `eiusmod tempor` incididunt ut labore et dolore magna aliqua.",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "default",
            "module": "$import(./modules/handler2)",
            "options": {}
          },
          "policies": {
            "inbound": []
          }
        },
        "operationId": "3b121a1d-54ed-4af1-973f-f4a9de5352d3"
      }
    }
  }
}